{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "nodejs-hw02-mongodb",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "API for managing user contacts."
  },
  "servers": [
    {
      "url": "https://nodejs-hw02-mongodb.onrender.com"
    },
    {
      "url": "http://localhost:3000",
      "description": "Local development server. API server (placeholder for documentation)."
    }
  ],
  "tags": [
    {
      "name": "contacts",
      "description": "Operations connecting with my contacts"
    },
    {
      "name": "auth",
      "description": "Auth operations"
    }
  ],
  "paths": {
    "/contacts": {
      "get": {
        "tags": [
          "contacts"
        ],
        "summary": "Retrieve a list of contacts",
        "operationId": "getContacts",
        "description": "Retrieves a paginated list of contacts for the authenticated user. Supports optional query parameters for pagination, sorting, and filtering by contact type or favorite status.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "required": false,
            "description": "The page number for pagination.",
            "example": 1
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10
            },
            "required": false,
            "description": "The number of contacts per page.",
            "example": 10
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "name"
              ],
              "default": "name"
            },
            "required": false,
            "description": "The field to sort by (only 'name' is supported).",
            "example": "name"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "required": false,
            "description": "The sort order (ascending or descending).",
            "example": "asc"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "personal",
                "work",
                "home"
              ]
            },
            "required": false,
            "description": "Filter contacts by type.",
            "example": "personal"
          },
          {
            "in": "query",
            "name": "isFavourite",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "Filter contacts by favorite status.",
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Contacts successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contacts!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/contact"
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 10
                        },
                        "totalItems": {
                          "type": "integer",
                          "example": 25
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 3
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "BadRequestError"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invalid page or perPage value"
                        }
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "contacts"
        ],
        "summary": "Create a new contact",
        "operationId": "createContact",
        "description": "Creates a new contact for the authenticated user. Requires a multipart form with contact details and an optional photo file. The request body is validated to ensure required fields (name, phoneNumber, contactType) and follow format rules. The contact is associated with the user via their user ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 20,
                    "description": "The name of the contact. Must be a string of 3 to 20 characters.",
                    "example": "Michael NotHidden"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 20,
                    "description": "The phone number of the contact. Must be a string of 3 to 20 characters.",
                    "example": 1112233
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "minLength": 3,
                    "maxLength": 20,
                    "description": "The email address of the contact (optional). Must be a valid email address of 3 to 20 characters if provided.",
                    "example": "michael@example.com"
                  },
                  "contactType": {
                    "type": "string",
                    "enum": [
                      "work",
                      "home",
                      "personal"
                    ],
                    "minLength": 3,
                    "maxLength": 20,
                    "description": "The type of contact. Must be one of 'work', 'home', or 'personal'.",
                    "example": "personal"
                  },
                  "isFavourite": {
                    "type": "boolean",
                    "description": "Whether the contact is marked as favorite (optional, defaults to false).",
                    "example": false
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "An optional photo file for the contact (image file, e.g., JPEG, PNG, max size depends on server configuration)."
                  }
                },
                "required": [
                  "name",
                  "phoneNumber",
                  "contactType"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a contact!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/contact"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or file upload error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "BadRequestError"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Validation failed: name must be at least 3 characters long"
                        }
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "description": "Server error during file upload or internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "InternalServerError"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "errorType": {
                          "type": "string",
                          "example": "upload",
                          "description": "Type of error ('upload' for file upload issues, 'general' for other server errors)"
                        },
                        "message": {
                          "type": "string",
                          "example": "Failed to upload file to Cloudinary"
                        }
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{id}": {
      "get": {
        "tags": [
          "contacts"
        ],
        "summary": "Retrieve a contact by ID",
        "operationId": "getContactById",
        "description": "Retrieves a specific contact by its ID for the authenticated user. The contact must belong to the user making the request. Returns the contact details if found, or a 404 error if the contact does not exist or does not belong to the user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contact with id 680e8cc96c3d5cf65c53314c!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "contacts"
        ],
        "summary": "Update a contact by ID",
        "operationId": "updateContact",
        "description": "Updates a contact by its ID for the authenticated user. The contact must belong to the user. Accepts a multipart form with optional contact details and an optional photo file. Fields are validated to meet length requirements (3 – 20 characters). At least one field is recommended to ensure an update occurs.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the contact to update (e.g., 680e8cc96c3d5cf65c53314c)."
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 20,
                    "description": "The name of the contact (optional). Must be a string of 3 to 20 characters if provided.",
                    "example": "Michael2"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 20,
                    "description": "The phone number of the contact (optional). Must be a string of 3 to 20 characters if provided.",
                    "example": 1112233
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "minLength": 3,
                    "maxLength": 20,
                    "description": "The email address of the contact (optional). Must be a valid email address of 3 to 20 characters if provided.",
                    "example": "michael.updated@example.com"
                  },
                  "contactType": {
                    "type": "string",
                    "enum": [
                      "work",
                      "home",
                      "personal"
                    ],
                    "minLength": 3,
                    "maxLength": 20,
                    "description": "The type of contact (optional). Must be one of 'work', 'home', or 'personal' if provided.",
                    "example": "work"
                  },
                  "isFavourite": {
                    "type": "boolean",
                    "description": "Whether the contact is marked as favorite (optional).",
                    "example": true
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "An optional photo file for the contact (image file, JPEG, PNG, max size depends on server configuration)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched a contact!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/contact"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid contact ID or request data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "BadRequestError"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Validation failed: name must be at least 3 characters long"
                        }
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "contacts"
        ],
        "summary": "Delete a contact by ID",
        "operationId": "deleteContact",
        "description": "Deletes a contact by its ID for the authenticated user. The contact must belong to the user. Returns no content on success.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the contact to delete."
          }
        ],
        "responses": {
          "204": {
            "description": "Contact successfully deleted"
          },
          "400": {
            "description": "Invalid contact ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "BadRequestError"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Contact ID is missing"
                        }
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "description": "Registers a new user with the provided name, email, and password. Returns the created user's data without the password field.",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe",
                    "description": "The user's name"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com",
                    "description": "The user's email address"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "Password123!",
                    "description": "The user's password (minimum 6 characters)"
                  }
                },
                "required": [
                  "name",
                  "email",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": 12345,
                          "description": "Unique identifier of the user"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe",
                          "description": "The user's name"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "user@example.com",
                          "description": "The user's email address"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2025-04-24T12:00:00Z",
                          "description": "Timestamp when the user was created"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2025-04-24T12:00:00Z",
                          "description": "Timestamp when the user was last updated"
                        }
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "BadRequestError"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Validation failed"
                        }
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "409": {
            "description": "Email already in use",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Email in use"
                    },
                    "data": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Log in a user",
        "operationId": "loginUser",
        "description": "Authenticates a user with email and password. Returns an access token and sets refreshToken and sessionId cookies.",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com",
                    "description": "The user's email address"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "Password123!",
                    "description": "The user's password (minimum 6 characters)"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                          "description": "JWT access token for authentication"
                        }
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "refreshToken=abc123; HttpOnly; Expires=2025-05-06T12:00:00Z; sessionId=12345;"
                },
                "description": "Cookies containing refreshToken and sessionId"
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "BadRequestError"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Validation failed"
                        }
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Invalid email or password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Email or password invalid"
                    },
                    "data": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "contact": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "phoneNumber",
          "contactType",
          "userId"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "680e8cc96c3d5cf65c53314c"
          },
          "name": {
            "type": "string",
            "example": "Michael NotHidden"
          },
          "phoneNumber": {
            "type": "string",
            "example": 1112233
          },
          "email": {
            "type": "string",
            "example": "michael@example.com"
          },
          "type": {
            "type": "string",
            "example": "personal"
          },
          "userId": {
            "type": "string",
            "example": "680be1cd4f1b271258c1c1ac"
          },
          "photo": {
            "type": "string",
            "example": "https://res.cloudinary.com/dlhomxhqd/image/upload/v1745784098/contacts-photos/vnro8p9dmnmiftqae6dk.png"
          },
          "isFavourite": {
            "type": "boolean",
            "example": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-10-01T12:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-10-01T12:00:00.000Z"
          }
        }
      }
    },
    "responses": {
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Missing or invalid Bearer token"
                    }
                  }
                }
              },
              "required": [
                "status",
                "message",
                "data"
              ]
            }
          }
        }
      },
      "404": {
        "description": "Contact not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Contact not found"
                    }
                  }
                }
              },
              "required": [
                "status",
                "message",
                "data"
              ]
            }
          }
        }
      },
      "500": {
        "description": "Contact not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "InternalServerError"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "errorType": {
                      "type": "string",
                      "example": "general",
                      "description": "Type of error ('upload' for file upload issues, 'general' for other server errors)"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              },
              "required": [
                "status",
                "message",
                "data"
              ]
            }
          }
        }
      }
    }
  }
}